1.Create file called â€œcalc.py" which has following functions a. function to find the factorial of a number b. function to find the log10 of a number c. function to convert degrees to radians d. The sin, cos and tan trigonometric functions Write a new program in file "maths.py" such that you import functions of file "calc.py" to your new program. Use from import statement to import only functions a & d from the calc module


Calc.py

import math
def factorial(n):
   if n == 1:
       return n
   else:
       return n*factorial(n-1)
def log(n1):
    print(" log10 of a number:", math.log(n1))

def radian(degree):
    pi=22/7
    radian = degree*(pi/180)
    print(radian)
def trigo(x):
    print("cos of x is :",math.cos(x))
    print("sin of x is:",math.sin(x))
    print("tan of x is:",math.tan(x));

Math.py

from calc import factorial, trigo
fact=factorial(6)
print(fact)
trigo(0.75)


2.Write a program to handle the following exceptions a) KeyboardInterrupt, b) NameError c) ArithmeticError Note : make use of Try, except, else and finally blocks

#KeyboardInterrupt

try:
    name = input("Enter your name: ")
    print( "You entered: " + name)
except KeyboardInterrupt:
    print ("You hit control-c")
#NameError
try:
  print(x)
except NameError:
  print("Variable x is not defined")
except:
  print("Something else went wrong")

#ArithmeticError  
try:   
    a = 10/0  
    print( a  ) 
except ArithmeticError:   
        print( "This statement is raising an arithmetic exception." ) 
else:   
    print( "Success.")
finally:
print("continue to printing.")



3.How do you handle exception for the following code? 

c = 0 
def f2(x): 
c+= 1 
b = x + c 
print c 
return b 
print f2(1) 
print c

Solution:	We can use try except to handle the UnboundLocalError
try:
    c = 0
    def f2(x):
      c+= 1
      b = x + c
      print( c)
      return b
    print( f2(1))
    print (c)
except UnboundLocalError:
    print ("UnboundLocal Error")



Or we can declare the c as global variable inside function to avoid ecxeption as:

c = 0
def f2(x):
    global c
    c+= 1
    b = x + c
    print( c)
    return b
print( f2(1))
print( c)




6. Implement a child class called mathnew and parent classes as sqroot, addition, subtraction, multiplication and division. Use the super () function to inherit the parent methods.



class addition:
    def __init__(self,a,b):
        self.a=a
        self.b=b
        print("addition of two number is:",self.a+self.b)
        
class subtraction(addition):
    def __init__(self,a,b):
        self.a=a
        self.b=b
        print("sub of two number is:",self.a-self.b)
        super().__init__(a,b)
       
        
class division(subtraction):
    def __init__(self,a,b):
        self.a=a
        self.b=b
        print( "div of two number is:",self.a/self.b)
        super().__init__(a,b)
        
       
class  multiplication(subtraction):
    def __init__(self,a,b):
        self.a=a
        self.b=b
        print("mul of two number is:",self.a*self.b)
        super().__init__(a,b)
class mathnew(division,multiplication):         
      def __init__(self):
         print("start")
         super().__init__(10,20)
m=mathnew()
print("Arithmatic operation performed")   
7.Create a class called First and two classes called Second and Third which inherit from First. Create class called Fourth which inherits from Second and Third. Create a common method called method1 in all the classes and provide the Method Resolution Order



class first: 
    def method1(self): 
        print(" first class") 
class second(first): 
    def method1(self): 
        print(" second class") 
class third(first): 
    def method1(self): 
        print("Third class") 
   
class fourth(second, third): 
    def method1(self): 
        print("fourth class") 
  
     
f = fourth() 
f.method1() 



8  Implement a simple generator for Fibonacci series


a = int(input('enter number up to which you want to print: '))

def fib(n):
    a, b = 0, 1
    for _ in range(n):
        yield a
        a, b = b, a + b

print(list(fib(a)))




9 Write an iterator class that iterators over a sequence of values in reverse direction.


class Iterator:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 10:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = Iterator()
myiter = iter(myclass)

for x in myiter:
  print(x)



10. Implement a decorator that quantifies and returns the execution time of any function

import timeit

def timer(function):
  def new_function():
    start_time = timeit.default_timer()
    function()
    elapsed = timeit.default_timer() - start_time
    print('Function "{name}" took {time} seconds to complete.'.format(name=function.__name__, time=elapsed))
  return new_function()
def addition():
  total = 0
  for i in range(0,1000000):
    total += i
  return total
